{"mappings":"sOA+GE,SAAAA,EAAsBC,EAAAC,GACtB,MAAAC,EAAmBC,SAAQC,eAAMJ,GAEjC,IAAAE,EAAA,OAAAG,QAAAC,OAAA,YAAAN,gBACA,MAAAO,E,SAnDMC,EAAAC,GAAA,G,QACD,GACHC,EAAAF,EAAAG,MAgCJ,OA9BID,IAGDA,EAAAE,SAAAC,IAEM,MAAAZ,EAAAY,EAAAC,SACT,GAAAb,GAAAc,mBAAAd,EAAAe,cAAA,CAEA,MAAAC,EAAAhB,EAAAe,cAOQ,IAAAC,EAAcC,QAASD,EAAAE,KAAA,OACxBF,GAAaV,EAAOa,KAAQ,CAElBF,MAAAD,EAAAC,MAEJC,KAAWF,EACpBE,KACKE,KAAApB,EAAAc,mBAEL,KAGKN,GAAAF,EAAQE,MAAQ,CAAAa,EAAAC,IAAAD,EAAAD,KAAAE,EAAAF,MAAA,OAGzBd,C,CAiBciB,CAAAvB,G,OAEP,IADHM,EAAOkB,OACJvB,EAA6BwB,UAAA,mBAK/BxB,EAAOwB,UAAiB,GACzBnB,EAAMK,SAAQK,GAAAf,EAASwB,WAAe,OAAAT,GAAAC,SAAAD,GAAAE,e,QAG9BQ,QAAQpB,E,kTA9HpBqB,EAAA,U,iJAsD0BC,G,QACpB1B,SAAYC,eAAW,W,IACvBS,EAAAa,UAASG,E,EA1Cb,SAACC,GAED,GAAAA,EAAOD,KAGT,OAFAC,EAAAD,KAAAE,KAAAF,GAAA,GAAAA,EAAAG,OAAAC,KAAA,QAAAJ,EAAAK,WAEAD,KAAA,OAQE,MAAI,gBAGN,C","sources":["src/index.ts"],"sourcesContent":["import FHIR from \"fhirclient\";\r\nimport {Bundle, Observation, Patient} from \"fhir/r4\";\r\nimport {fhirclient} from \"fhirclient/lib/types\";\r\nimport dateTime = fhirclient.FHIR.dateTime;\r\n\r\n/**\r\n * Extract names from FHIR Patient object\r\n * @param pt FHIR patient\r\n * @return string with list of names or \"Name not found\"\r\n */\r\nfunction getPatientName(pt: Patient) {\r\n  if (pt.name) {\r\n    const names = pt.name.map(name => `${name.given?.join(\" \")} ${name.family}`)\r\n    return names.join(\" / \")\r\n  }\r\n\r\n  return \"Name not found\"\r\n}\r\n\r\n/**\r\n * Update the 'pt_name' document to the text of 'name'\r\n *\r\n * @param name string containing the patient name(s)\r\n */\r\nfunction updatePatientName(name: string) {\r\n  const el = document.getElementById('pt_name');\r\n\r\n  if (el) {\r\n    el.innerHTML = name;\r\n  }\r\n}\r\n\r\n////////////////////////// Weight List /////////////////////////////\r\n\r\n/**\r\n * Stores the value, unit, and time of a quantity Observation\r\n */\r\ntype TimedObservationQuantity = {\r\n  value: number;\r\n  unit: string;\r\n  time: dateTime\r\n}\r\n\r\n/**\r\n * Create a list of TimedObservationQuantity quantities from a FHIR bundle\r\n *\r\n * @param bundle FHIR Observation bundle\r\n * @param {boolean=} [sort] Whether or not to sort list. Sorts if left blank\r\n */\r\nfunction getValuesFromBundle(bundle: Bundle<Observation>, sort = true) {\r\n  const values: TimedObservationQuantity[] = [];\r\n  const entries = bundle.entry;\r\n\r\n  if (entries) {\r\n    entries.forEach(el => {\r\n      const res = el.resource;\r\n      if (res?.effectiveDateTime && res.valueQuantity) {\r\n        const val = res.valueQuantity;\r\n        if (!val.value || !val.unit) return;\r\n\r\n        if (val) values.push({\r\n          value: val.value,\r\n          unit: val.unit,\r\n          time: res.effectiveDateTime\r\n        })\r\n      }\r\n    })\r\n\r\n    if (sort) {\r\n      values.sort((a, b) => (a.time < b.time ? -1 : 1))\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n/**\r\n * Populate a given elementID with the results from a bundle\r\n *\r\n * @param elementId\r\n * @param res\r\n */\r\nfunction populateListFromValues(elementId: string, res: Bundle<Observation>) {\r\n  const listElement = document.getElementById(elementId);\r\n  if (!listElement) return Promise.reject(`Element '${elementId}' not found`);\r\n\r\n  const values = getValuesFromBundle(res);\r\n\r\n  if (values.length === 0) {\r\n    listElement.innerHTML = 'No values found';\r\n  } else {\r\n    listElement.innerHTML = '';\r\n    values.forEach(val => listElement.innerHTML += `<li>${val?.value} ${val?.unit}</li>`)\r\n  }\r\n\r\n  return Promise.resolve(values)\r\n}\r\n\r\n/**\r\n * Calculate a BMI from a given wt and ht\r\n * @param values values including a weight in kg, ht in meters\r\n */\r\nfunction calculateBMI(values: {wt: number, ht: number}) {\r\n  return values.wt / Math.pow(values.ht, 2)\r\n}\r\n\r\nFHIR.oauth2.ready().then(client => {\r\n  document.getElementById(\"launch_link\")?.remove()\r\n  const ptId = client.patient.id;\r\n  console.log(ptId)\r\n\r\n  // Update patient name\r\n  client.patient.read().then(pt => updatePatientName(getPatientName(pt)))\r\n\r\n  // Obtain list of patient weight and heights, update BMI when both bundles have data\r\n  Promise.all([\r\n    client.patient\r\n      .request<Bundle<Observation>>('Observation?code=29463-7')\r\n      .then(weights => populateListFromValues('wt_list', weights)),\r\n    client.patient\r\n      .request<Bundle<Observation>>('Observation?code=8302-2')\r\n      .then(heights => populateListFromValues('ht_list', heights))\r\n  ]).then(([weights, heights]) => {\r\n    const bmiEl = document.getElementById('bmi');\r\n    if (bmiEl && weights.length > 0 && heights.length > 0) {\r\n      bmiEl.innerHTML = calculateBMI({\r\n        wt: weights[weights.length - 1].value,\r\n        ht: heights[heights.length - 1].value / 100\r\n      }).toFixed(2)\r\n    }\r\n  })\r\n})\r\n"],"names":["$b4e14b6b8da86996$var$populateListFromValues","elementId","res","listElement","document","getElementById","Promise","reject","values","bundle","sort","entries","entry","forEach","el","resource","effectiveDateTime","valueQuantity","val","value","unit","push","time","a","b","$b4e14b6b8da86996$var$getValuesFromBundle","length","innerHTML","resolve","parcelRequire","name","pt","map","given","join","family"],"version":3,"file":"index.20755674.js.map"}